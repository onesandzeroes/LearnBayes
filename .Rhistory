install.packages("LearnBayes")
head(studentdata)
library(LearnBayes)
data(studentdata)
studentdata[1, ]
table(studentdata$Drink)
ggplot(studentdata, aes(Drink)) + geom_bar()
library(ggplot2)
ggplot(studentdata, aes(Drink)) + geom_bar()
studentdata$HoursSlept <- studentdata$WakeUp - studentdata$ToSleep
summary(studentdata$HoursSlept)
ggplot(studentdata, aes(HoursSlept)) + geom_histogram()
ggplot(studentdata, aes(HoursSlept)) + geom_histogram(binwidth=1)
ggplot(studentdata, aes(Gender, HoursSlept)) + geom_boxplot()
library(ggplot2)
ggplot(studentdata, aes(Gender, HoursSlept)) + geom_boxplot()
ggplot(studentdata, aes(ToSleep, HoursSlept)) + geom_point(alpha=0.2)
ggplot(studentdata, aes(ToSleep, HoursSlept)) + geom_point(alpha=0.2) + geom_smooth(method="lm")
lm(HoursSlept ~ ToSleep, data=studentdata)
t.statistic <- function(x, y) {
m <- length(x)
n <- length(y)
s.pooled <-sqrt( ((m - 1) * sd(x)^2 + (n - 1) * sd(y)^2) / (m + n - 2) )
t.stat <- (mean(x) - mean(y)) / (s.pooled * sqrt( 1/m + 1/n))
return(t.stat)
}
data.x <- c(1, 4, 3, 6, 5)
data.y <- c(5, 4, 7, 6, 10)
t.statistic(data.x, data.y)
?qt
qt(0.975, 10)
qt(0.975, 100)
t.simulate <- function(alpha, m, n, N) {
n.reject <- 0
for i in (1:N) {
x <- rnorm(m, mean=0, sd=1)
y <- rnorm(n, mean=0, sd=1)
t.stat <- t.statistic(x, y)
# the qt() call returns the critical t
if (abs(t.stat) > qt(1 - alpha/2, m + n -2))
n.reject <- n.reject + 1
}
true.sig <- n.reject/N
return(true.sig)
}
t.simulate <- function(alpha, m, n, N) {
n.reject <- 0
for (i in 1:N) {
x <- rnorm(m, mean=0, sd=1)
y <- rnorm(n, mean=0, sd=1)
t.stat <- t.statistic(x, y)
# the qt() call returns the critical t
if (abs(t.stat) > qt(1 - alpha/2, m + n -2))
n.reject <- n.reject + 1
}
true.sig <- n.reject/N
return(true.sig)
}
t.simulate(.1, 10, 10, 10000)
source('~/.active-rstudio-document', echo=TRUE)
true.sig.allmet
true.sig.differentvariance
true.sig.exponentials
true.sig.normexp
true.sig.tdistributions
my.tsim <- function() tstatistic(rnorm(m, mean=10, sd=2), rexp(n, rate=1/10))
tstat.vector <- replicate(10000, my.tsim())
mean
my.tsim <- function() t.statistic(rnorm(m, mean=10, sd=2), rexp(n, rate=1/10))
tstat.vector <- replicate(10000, my.tsim())
tstat.df <- data.frame(tstat=tstat.vector)
ggplot(tstat.df, aes(tstat)) + geom_density()
?rt
?stat_function
ggplot(tstat.df, aes(tstat)) + geom_density() + stat_function(fun = dt, arg=list(df=18))
ggplot(tstat.df, aes(tstat)) +
geom_density(colour="red") +
stat_function(fun = dt, arg=list(df=18), colour="blue")
ggplot(tstat.df, aes(tstat)) +
geom_density(colour="red") +
stat_function(fun = dt, arg=list(df=18), colour="blue") +
geom_vline(aes(x=qt(0.975, 18)))
qt(0.975, 18)
?geom_vline
ggplot(tstat.df, aes(tstat)) +
geom_density(colour="red") +
stat_function(fun = dt, arg=list(df=18), colour="blue") +
geom_vline(xintercept=qt(0.975, 18))
ggplot(tstat.df, aes(tstat)) +
geom_density(colour="red") +
stat_function(fun = dt, arg=list(df=18), colour="blue") +
geom_vline(xintercept=qt(0.975, 18), colour="blue", linetype="dotted")
save.image("~/Documents/LearnBayes/.RData")
